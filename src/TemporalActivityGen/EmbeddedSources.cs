using System;
using System.IO;
using System.Reflection;
using System.Text;

namespace TemporalActivityGen;

internal static class EmbeddedSources
{
    private static readonly Assembly ThisAssembly = typeof(EmbeddedSources).Assembly;
    internal static readonly string GenerateActivityProxyAttributeSource = LoadTemplateForEmitting("GenerateActivityProxyAttribute");

    private static readonly string AutoGeneratedHeader = LoadEmbeddedResource("TemporalActivityGen.Templates.AutoGeneratedHeader.cs");
    private static readonly string DefaultUsings = LoadEmbeddedResource("TemporalActivityGen.Templates.DefaultUsings.cs");


    internal static string CreateActivityProxyRegistration(string activityProxyType)
        => $"[assembly: global::TemporalActivityGen.ActivityProxyRegistration({activityProxyType})]";

    internal static readonly ResourceCollection DefaultResources = new(
        AutoGeneratedHeader,
        true,
        DefaultUsings);
    internal static string LoadEmbeddedResource(string resourceName)
    {
        var resourceStream = ThisAssembly.GetManifestResourceStream(resourceName);
        if (resourceStream is null)
        {
            var existingResources = ThisAssembly.GetManifestResourceNames();
            throw new ArgumentException($"Could not find embedded resource {resourceName}. Available names: {string.Join(", ", existingResources)}");
        }

        using var reader = new StreamReader(resourceStream, Encoding.UTF8);

        return reader.ReadToEnd();
    }

    public readonly struct ResourceCollection
    {
        public readonly string Header;
        public readonly bool NullableEnable;
        public readonly string DefaultUsings;

        public ResourceCollection(
            string header,
            bool nullableEnable,
            string defaultUsings)
        {
            this.Header = header;
            this.NullableEnable = nullableEnable;
            this.DefaultUsings = defaultUsings;
        }
    }

    internal static string LoadTemplateForEmitting(string resourceName)
    {
        var resource = LoadEmbeddedResource($"TemporalActivityGen.Templates.Sources.{resourceName}.cs");
        return AutoGeneratedHeader + @"#if TEMPORAL_ACTIVITY_GEN_EMBED_ATTRIBUTES

" + resource
                .Replace("public sealed", "internal sealed")
                .Replace("public enum", "internal enum")
            + @"
#endif";
    }
}
